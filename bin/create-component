const commander = require('./commander');
const { writeFileSync } = require('fs');
const { resolve } = require('path');

const OPTIONS = commander
.option('--react', 'Create a react component (this is the default)')
.option('--preact', 'Create a preact component')
.option('--out <directory>', 'The destination folder for the output')
.option('--no-css', 'Disable the creation and linking of a css file')
.option('--no-store', 'Disable the creation of the store file')
.option('--ext [js|ts]', 'Set the file extension', 'ts')
.option(
  '--dry-run',
  'Simulate the creation of the files, but without actually writing to the disk.'
)
.arguments('<name> [...name]')
.description(
  `Create a component with the necessary files. You may specify <name> as
  either a CamelCase name, or a hyphen-case name.`
)
;

commander.parse(process.argv);

/**
 * Main program entry point
 */
async function main() {
  const names = OPTIONS.args.slice(0);
  const ext = OPTIONS.ext.substr(0, 2);
  const TS = OPTIONS.ext == 'ts';
  const JS = !TS;

  const createFile = OPTIONS.dryRun ?
    fileName => console.log(`- ${fileName}`) :
    (file, data) => writeFileSync(file, data.trim() + '\n')
  ;

  names.forEach(name => {
    const nameParts = name.match(/([A-Z]?[a-z0-9_]+)/g);
    const hyphenCase = nameParts.map(n => n.toLowerCase()).join('-');
    const camelCase = nameParts.map(n => `${n[0].toUpperCase()}${n.substr(1)}`).join('');
    const outFile = resolve(OPTIONS.out || '.', hyphenCase);

    const buildReact = () => {
      return `
import { observer } from "mobx-react";
import * as React from "react";
import { Component } from "react";
import { ${camelCase}Store } from "./${hyphenCase}-store.${ext}";
import "./${hyphenCase}.scss";
${TS ? `

interface IProps extends Pick<HTMLAttributes<HTMLElement>, "className"> {
}

` : ''}
@observer
export class ${camelCase} extends Component${TS ? '<IProps>' : ''} {
  render() {
    const { children, className = '' } = this.props;

    return (
      <div className={\`${camelCase} \${className}\`}>
        ${camelCase}
        {children}
      </div>
    );
  }
}
      `;
    };

    const buildPreact = () => `
/** @jsx h */
import { observer } from "mobx-react";
import { Component, h } from "react";
import { ${camelCase}Store } from "./${hyphenCase}-store.${ext}";
import "./${hyphenCase}.scss";
${TS ? `

interface IProps extends Pick<HTMLAttributes<HTMLElement>, "className"> {
}

` : ''}
@observer
export class ${camelCase} extends Component${TS ? '<IProps>' : ''} {
  render() {
    const { children, className = '' } = this.props;

    return (
      <div className={\`${camelCase} \${className}\`}>
        ${camelCase}
        {children}
      </div>
    );
  }
}
`;

    createFile(
      `${outFile}.${ext}x`,
      OPTIONS.preact ? buildPreact() : buildReact()
    );
    createFile(`${outFile}.scss`, `
.${camelCase} {
  // CSS goes here
}
`
    );
    if (OPTIONS.store) {
      createFile(`${outFile}-store.${ext}`, `
class Store {
}

export const ${camelCase}Store = new Store();
`
      );
    }
  });
}

main().catch(console.error);

// code: language=JavaScript
