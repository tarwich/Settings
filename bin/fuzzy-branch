#!/usr/bin/env node

const {spawn} = require('child_process');

const {FILTER, DEBUG} = processArguments();

const debug = DEBUG ?
  message => console.log(`DEBUG: ${message}`) :
  message => {};

async function main() {
  let branches = await shell('git', ['branch', '-ai', '--list', `*${FILTER}*`])
  .catch(error => {
    fail(`ERROR: ${error}`);
  });
  branches = branches
  .trim()
  .split('\n')
  .filter(s => !/^\s*\*/.test(s))
  .map(s => s
    .trim()
    .replace(/remotes\/[^\/]+\//, '')
  )
  debug(branches);
  const branch = branches[0];

  if (branch) {
    await shell('git', ['checkout', branch])
    .catch(error => {
      if (/Already on/.test(error)) return Promise.resolve();
      else fail(`ERROR:\n${error}`);
    });
    console.log(`Changed to branch: ${branch}`);
  }
}

function fail(message) {
  console.error(message);
  process.exit(1);
}

function processArguments() {
  const {argv} = process;
  const result = {};

  for (let i = 2; i < argv.length; ++i) {
    const arg = argv[i];

    switch (arg) {
      case '--debug':
        result.DEBUG = true;
        break;
      default:
        result.FILTER = arg;
        break;
    }
  }

  return result;
}

function shell(command, parameters) {
  return new Promise((resolve, reject) => {
    let stdout = '';
    let stderr = '';
    debug(`(shell) ${command} ${parameters.join(' ')}`);
    const child = spawn(command, parameters);

    child.stdout.on('data', data => {
      stdout += data.toString();
    });

    child.on('close', () => {
      if (stderr) reject(stderr);
      else resolve(stdout);
    });

    child.stderr.on('data', error => {
      stderr += error.toString();
    })
  });
}

main();
